"""
BayesNetwork.py
An implementation of a Bayesian Network for Programming Assignment Four.
"""

import pandas as pd
import json

__author__ = "Chris Campell"
__version__ = "10/28/2017"


def enumeration_ask(X,e,bn):
    """
    enumeration_ask: Returns a probability distribution over X.
    :param X: The query variable for which probabilities are to be inferred.
    :param e: The observed values for variables E.
    :param bn: A Bayesian Network with variables {X} union E union Y (hidden variables).
    :return norm_dist_x: A normalized probability distribution over the query variable X.
    """
    return NotImplementedError


def enumerate_all(vars, e):
    """
    enumerate_all: Helper method for enumeration_ask, computes the joint probability distribution of the provided
        variables, given a set of observations.
    :param vars: A list of input variables for which to construct the joint from.
    :param e: A list of observations of the input variables which influence the joint distribution.
    :return joint_dist: The joint distribution of the provided 'vars' with the supplied observations 'e'.
    """
    return NotImplementedError


def construct_probability_table(node, observations, dependencies=None, prob_tables_dependencies=None):
    """
    construct_probability_table: Builds a probability table for the provided node given the provided observations-
        (the number of Trues and False's).
    :param node: A node in the Bayesian Network.
    :param observations: The observations of the evidence variables in the network.
    :param dependencies: The nodes that the provided node is dependent on (if any).
    :param prob_tables_dependencies: A dictionary of probability tables for each of the dependencies listed in
        dependencies. These tables are necessary to calculate the probability of a conditionally dependent node.
    :return node_prob_table: A probability table for the supplied node generated by the observations of the
        dependent variables.
    """
    node_prob_table = {}
    if dependencies is not None:
        # The node is independent; simply sum the number of true and false's:
        # node_observations = observations.groupby(node).count()
        # node_value_counts = observations[node].value_counts()
        num_true = observations[node].value_counts()[True]
        total_num_obs = len(observations[node])
        node_prob_table[True] = (num_true / total_num_obs)
        node_prob_table[False] = 1 - node_prob_table[True]
    else:
        # The node is dependent on the nodes in the dependencies list:
        #       P(Node | Dependency[0], Dependency[1], ..., Dependency[n]):
        for dependency in dependencies:
            return NotImplementedError
    return node_prob_table


def is_independent(node, bayes_net):
    """
    is_independent: Returns True if the node is an independent node in the Bayesian Network.
    :param node: The node for which to determine dependency.
    :param bayes_net: The topology of the Bayesian Network.
    :return boolean: True if the node is independent as specified in the topology of the Bayesian Network;
        False otherwise.
    """
    for parent, child_list in bayes_net.items():
        if node in child_list:
            # The node is a child of another node, it is dependent.
            return False
    # The node is not a child of another node, it is independent.
    return True

def get_dependencies(node, bayes_net):
    """
    get_dependencies: Returns the nodes that the provided node is conditionally dependent upon.
    :param node: The node to calculate dependencies for.
    :param bayes_net: The topology of the Bayesian Network.
    :return dependencies: A list of nodes that the provided node is dependent upon. Returns None if the provided node
        is independent.
    """
    if is_independent(node=node, bayes_net=bayes_net):
        # If the node is independent, it has no dependencies:
        return None
    dependencies = []
    for parent, child_list in bayes_net.items():
        if node in child_list:
            # The node is a child of another node, it is dependent.
            dependencies.append(parent)
    return dependencies


def build_probability_tables(node, bayes_net, observations, probability_tables=None, dependencies=None):
    if dependencies is None or dependencies is False:
        # Base case, calculate the probability of the independent variable given the observations:
        num_true = observations[node].value_counts()[True]
        total_num_obs = len(observations[node])
        node_prob_table = {}
        node_prob_table[True] = (num_true / total_num_obs)
        node_prob_table[False] = 1 - node_prob_table[True]
        return node_prob_table
    else:
        # The variable is conditionally dependent:
        for dependency in dependencies:
            # The CPTs for the dependent variable must be constructed first:
            if dependency not in probability_tables:
                # The dependent variable has no entry in the probability tables, build it:
                probability_tables[dependency] = build_probability_tables(node=dependency, bayes_net=bayes_net,
                                                                          observations=observations,
                                                                          probability_tables=probability_tables,
                                                                          dependencies=get_dependencies(dependency, bayes_net))
        # All dependent information needed to calculate the CPT for the provided node has been generated:
        # subset the observations by the conditional variables:
        return NotImplementedError

def main(bayes_net, observations):
    """ build the bayesian network """
    prob_tables = {}
    for node in bayes_net:
        if is_independent(node, bayes_net):
            # The node has no parent, it is independent.
            if node not in prob_tables:
                # The node is not already in the probability tables.
                prob_tables[node] = build_probability_tables(node=node, bayes_net=bayes_net,
                                                             observations=observations, probability_tables=prob_tables)
        else:
            # The node is the child of another node, it is dependent upon its parent.
            if node not in prob_tables:
                # The node is not already in the probability tables.
                # Get the nodes that the current node is conditionally dependent upon:
                dependencies = get_dependencies(node, bayes_net)
                # Build the probability table for this node:
                prob_tables[node] = build_probability_tables(node=node, bayes_net=bayes_net, observations=observations,
                                                             probability_tables=prob_tables, dependencies=dependencies)

if __name__ == '__main__':
    bn_one_path = 'bn1.json'
    observations_one_path = 'data1.csv'
    bn_two_path = 'bn2.json'
    observations_two_path = 'data2.csv'
    with open(bn_one_path, 'r') as fp:
        bayes_net_one = json.load(fp=fp)
    with open(bn_two_path, 'r') as fp:
        bayes_net_two = json.load(fp=fp)
    with open(observations_one_path, 'r') as fp:
        observations_one = pd.read_csv(fp)
    with open(observations_two_path, 'r') as fp:
        observations_two = pd.read_csv(fp)
    main(bayes_net=bayes_net_one, observations=observations_one)
